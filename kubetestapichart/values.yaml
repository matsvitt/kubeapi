cm0:
  Gitignore: |-
    # Byte-compiled / optimized / DLL files
    __pycache__/
    *.py[cod]
    *$py.class
    web*yaml
    # C extensions
    *.so
    # Distribution / packaging
    .Python
    build/
    develop-eggs/
    dist/
    downloads/
    eggs/
    .eggs/
    lib/
    lib64/
    parts/
    sdist/
    var/
    wheels/
    share/python-wheels/
    *.egg-info/
    .installed.cfg
    *.egg
    MANIFEST
    # PyInstaller
    #  Usually these files are written by a python script from a template
    #  before PyInstaller builds the exe, so as to inject date/other infos into it.
    *.manifest
    *.spec
    # Installer logs
    pip-log.txt
    pip-delete-this-directory.txt
    # Unit test / coverage reports
    htmlcov/
    .tox/
    .nox/
    .coverage
    .coverage.*
    .cache
    nosetests.xml
    coverage.xml
    *.cover
    *.py,cover
    .hypothesis/
    .pytest_cache/
    cover/
    # Translations
    *.mo
    *.pot
    # Django stuff:
    *.log
    local_settings.py
    db.sqlite3
    db.sqlite3-journal
    # Flask stuff:
    instance/
    .webassets-cache
    # Scrapy stuff:
    .scrapy
    # Sphinx documentation
    docs/_build/
    # PyBuilder
    .pybuilder/
    target/
    # Jupyter Notebook
    .ipynb_checkpoints
    # IPython
    profile_default/
    ipython_config.py
    # pyenv
    #   For a library or package, you might want to ignore these files since the code is
    #   intended to run in multiple environments; otherwise, check them in:
    # .python-version
    # pipenv
    #   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
    #   However, in case of collaboration, if having platform-specific dependencies or dependencies
    #   having no cross-platform support, pipenv may install dependencies that don't work, or not
    #   install all needed dependencies.
    #Pipfile.lock
    # UV
    #   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
    #   This is especially recommended for binary packages to ensure reproducibility, and is more
    #   commonly ignored for libraries.
    #uv.lock
    # poetry
    #   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
    #   This is especially recommended for binary packages to ensure reproducibility, and is more
    #   commonly ignored for libraries.
    #   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
    #poetry.lock
    # pdm
    #   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
    #pdm.lock
    #   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
    #   in version control.
    #   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
    .pdm.toml
    .pdm-python
    .pdm-build/
    # PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
    __pypackages__/
    # Celery stuff
    celerybeat-schedule
    celerybeat.pid
    # SageMath parsed files
    *.sage.py
    # Environments
    .env
    .venv
    env/
    venv/
    ENV/
    env.bak/
    venv.bak/
    # Spyder project settings
    .spyderproject
    .spyproject
    # Rope project settings
    .ropeproject
    # mkdocs documentation
    /site
    # mypy
    .mypy_cache/
    .dmypy.json
    dmypy.json
    # Pyre type checker
    .pyre/
    # pytype static type analyzer
    .pytype/
    # Cython debug symbols
    cython_debug/
    # PyCharm
    #  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
    #  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
    #  and can be added to the global gitignore or merged into this file.  For a more nuclear
    #  option (not recommended) you can uncomment the following to ignore the entire idea folder.
    #.idea/
    # PyPI configuration file
    .pypirc
  appPy: |-
    from fastapi import FastAPI
    from pydantic import BaseModel
    import logging
    import os
    import json
    logging.basicConfig(level=logging.INFO)
    app = FastAPI()
    db = {}  # Simulated in-memory database
    db_shared = {}  # Simulated in-memory shared database
    class Item(BaseModel):
        id: int
        data: str
    @app.post("/create")
    def create_item(item: Item):
        db[item.id] = item.data
        if os.path.exists("/data"):
            with open(f"/data/data{item.id}.json","w") as f:
                json.dump(item.model_dump_json(), f)
                logging.info(f"Data saved to /data/data{item.id}.json")
        else:
             logging.warning("/data directory does not exist")
        return {"message": "Item created", "id": item.id}
    @app.post("/createshared")
    def create_shared_item(item: Item):
        db_shared[item.id] = item.data
        if os.path.exists("/datashared"):
            with open(f"/datashared/data{item.id}.json","w") as f:
                json.dump(item.model_dump_json(), f)
                logging.info(f"Data saved to /datashared/data{item.id}.json")
        else:
             logging.warning("/data directory does not exist")
        return {"message": "Shared item created", "id": item.id}
    @app.get("/read/{id}")
    def read_item(id: int):
        if os.path.exists("f/data/data{id}.json"):
            with open(f"/data/data{id}.json","r") as f:
                data = json.load(f)
                logging.info(f"Data read from /data/data{id}.json")
                return data
        elif id in db:
            logging.info(f"Data read from in-memory database")
            return {"id": id, "data": db[id]}
        return {"error": "Item not found"}
    @app.get("/readshared/{id}")
    def read_shared_item(id: int):
        if os.path.exists("f/datashared/data{id}.json"):
            with open(f"/datashared/data{id}.json","r") as f:
                data = json.load(f)
                logging.info(f"Data read from /datashared/data{id}.json")
                return data
        elif id in db_shared:
            logging.info(f"Data read from in-memory shared database")
            return {"id": id, "data": db_shared[id]}
        return {"error": "Shared item not found"}
    @app.get("/hello")
    def hello():
        return "<html><body><h1>Hi there from fast api!</h1></body></html>"
  dockerComposeYml: |-
    version: '3.8'
    services:
      kubetestapi:
        image: matsvitt/kubetestapi:latest
        ports:
          - "8000:8000"
        volumes:
          - .:/app
          - ./data:/data
          - ./datashared:/datashared
        environment:
          - PYTHONUNBUFFERED=1
        command: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
  dockerfile: |-
    FROM python:3.11-slim
    WORKDIR /app
    COPY requirements.txt ./
    RUN pip install --no-cache-dir -r requirements.txt
    COPY . .
    VOLUME /data
    VOLUME /datashared
    EXPOSE 8000
    CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
  makefile: "default: run\nrun:\n\tuvicorn app:app --reload\npost1:\n\tcurl -X POST
    \"http://127.0.0.1:8000/create\" -H \"Content-Type: application/json\" -d '{\"id\":
    1, \"data\": \"example data\"}'\npost2:\n\tcurl -X POST \"http://127.0.0.1:8000/createshared\"
    -H \"Content-Type: application/json\" -d '{\"id\": 2, \"data\": \"shared data\"}'\nget1:\n\tcurl
    -X GET \"http://127.0.0.1:8000/read/1\"\nget2:\n\tcurl -X GET \"http://127.0.0.1:8000/readshared/2\"\nbuild:\n\tdocker
    build -t matsvitt/kubetestapi:latest .\npush:\n\tdocker push matsvitt/kubetestapi:latest\nyaml:\n\tbin/kompose
    convert\n\tmkdir -p helm_input\n\trm -rf helm_input/*yaml\n\tmkdir -p kubapitestchart\n\tmv
    kubetestapi*yaml helm_input\nhelmify:\n\twget https://github.com/arttor/helmify/releases/download/v0.4.17/helmify_Linux_x86_64.tar.gz\n\ttar
    xvzf helmify_Linux_x86_64.tar.gz\n\tmv helmify bin\n\tchmod +x bin/helmify\n\trm
    -rf helmify_Linux_x86_64.tar.gz*\nhelmchart:\n\tbin/helmify -f ./helm_input -r
    kubetestapichart"
  rEADMEMd: |-
    # kubeapi
    Test Service to store and retrieve test items on exclusive and shared folders
    ## kompose
    curl -L https://github.com/kubernetes/kompose/releases/download/v1.34.0/kompose-linux-amd64 -o kompose
  requirementsTxt: |-
    fastapi
    uvicorn
    pydantic
kubernetesClusterDomain: cluster.local
kubetestapi:
  kubetestapi:
    args:
    - uvicorn
    - app:app
    - --host
    - 0.0.0.0
    - --port
    - "8000"
    - --reload
    env:
      pythonunbuffered: "1"
    image:
      repository: matsvitt/kubetestapi
      tag: latest
  ports:
  - name: "8000"
    port: 8000
    targetPort: 8000
  replicas: 1
  strategy:
    type: Recreate
  type: ClusterIP
pvc:
  claim1:
    storageClass: longhorn-prod
    storageRequest: 100Mi
  claim2:
    storageClass: longhorn-rwx
    storageRequest: 100Mi
