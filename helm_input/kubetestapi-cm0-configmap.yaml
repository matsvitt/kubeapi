apiVersion: v1
data:
  .gitignore: |
    # Byte-compiled / optimized / DLL files
    __pycache__/
    *.py[cod]
    *$py.class


    bin
    web*yaml

    # C extensions
    *.so

    # Distribution / packaging
    .Python
    build/
    develop-eggs/
    dist/
    downloads/
    eggs/
    .eggs/
    lib/
    lib64/
    parts/
    sdist/
    var/
    wheels/
    share/python-wheels/
    *.egg-info/
    .installed.cfg
    *.egg
    MANIFEST

    # PyInstaller
    #  Usually these files are written by a python script from a template
    #  before PyInstaller builds the exe, so as to inject date/other infos into it.
    *.manifest
    *.spec

    # Installer logs
    pip-log.txt
    pip-delete-this-directory.txt

    # Unit test / coverage reports
    htmlcov/
    .tox/
    .nox/
    .coverage
    .coverage.*
    .cache
    nosetests.xml
    coverage.xml
    *.cover
    *.py,cover
    .hypothesis/
    .pytest_cache/
    cover/

    # Translations
    *.mo
    *.pot

    # Django stuff:
    *.log
    local_settings.py
    db.sqlite3
    db.sqlite3-journal

    # Flask stuff:
    instance/
    .webassets-cache

    # Scrapy stuff:
    .scrapy

    # Sphinx documentation
    docs/_build/

    # PyBuilder
    .pybuilder/
    target/

    # Jupyter Notebook
    .ipynb_checkpoints

    # IPython
    profile_default/
    ipython_config.py

    # pyenv
    #   For a library or package, you might want to ignore these files since the code is
    #   intended to run in multiple environments; otherwise, check them in:
    # .python-version

    # pipenv
    #   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
    #   However, in case of collaboration, if having platform-specific dependencies or dependencies
    #   having no cross-platform support, pipenv may install dependencies that don't work, or not
    #   install all needed dependencies.
    #Pipfile.lock

    # UV
    #   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
    #   This is especially recommended for binary packages to ensure reproducibility, and is more
    #   commonly ignored for libraries.
    #uv.lock

    # poetry
    #   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
    #   This is especially recommended for binary packages to ensure reproducibility, and is more
    #   commonly ignored for libraries.
    #   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
    #poetry.lock

    # pdm
    #   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
    #pdm.lock
    #   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
    #   in version control.
    #   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
    .pdm.toml
    .pdm-python
    .pdm-build/

    # PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
    __pypackages__/

    # Celery stuff
    celerybeat-schedule
    celerybeat.pid

    # SageMath parsed files
    *.sage.py

    # Environments
    .env
    .venv
    env/
    venv/
    ENV/
    env.bak/
    venv.bak/

    # Spyder project settings
    .spyderproject
    .spyproject

    # Rope project settings
    .ropeproject

    # mkdocs documentation
    /site

    # mypy
    .mypy_cache/
    .dmypy.json
    dmypy.json

    # Pyre type checker
    .pyre/

    # pytype static type analyzer
    .pytype/

    # Cython debug symbols
    cython_debug/

    # PyCharm
    #  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
    #  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
    #  and can be added to the global gitignore or merged into this file.  For a more nuclear
    #  option (not recommended) you can uncomment the following to ignore the entire idea folder.
    #.idea/

    # PyPI configuration file
    .pypirc
  Dockerfile: |
    FROM python:3.11-slim

    WORKDIR /app

    COPY requirements.txt ./
    RUN pip install --no-cache-dir -r requirements.txt

    COPY . .


    VOLUME /data
    VOLUME /datashared

    EXPOSE 8000

    CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
  Makefile: |
    default: xhelm


    .PHONY: chart upgrade xhelm

    run:
    	uvicorn app:app --reload

    post1:
    	curl -X POST "http://127.0.0.1:8000/create" -H "Content-Type: application/json" -d '{"id": 1, "data": "example data"}'

    post2:
    	curl -X POST "http://127.0.0.1:8000/createshared" -H "Content-Type: application/json" -d '{"id": 2, "data": "shared data"}'

    get1:
    	curl -X GET "http://127.0.0.1:8000/read/1"

    get2:
    	curl -X GET "http://127.0.0.1:8000/readshared/2"


    build:
    	docker build -t matsvitt/kubetestapi:latest .

    push:
    	docker push matsvitt/kubetestapi:latest

    yaml:
    	bin/kompose convert
    	mkdir -p helm_input
    	rm -rf helm_input/*yaml
    	mkdir -p kubapitestchart
    	mv kubetestapi*yaml helm_input


    helmify:
    	wget https://github.com/arttor/helmify/releases/download/v0.4.17/helmify_Linux_x86_64.tar.gz
    	tar xvzf helmify_Linux_x86_64.tar.gz
    	mv helmify bin
    	chmod +x bin/helmify
    	rm -rf helmify_Linux_x86_64.tar.gz*

    chart:
    	bin/helmify -f ./helm_input -r kubetestapichart


    install:
    	helm install kubeapitest1 kubetestapichart/ --namespace caddy-system

    uninstall:
    	helm uninstall kubeapitest1 --namespace caddy-system


    upgrade:
    	helm upgrade kubeapitest1 kubetestapichart/ --namespace caddy-system


    xhelm: chart upgrade
  README.md: |
    # kubeapi
    Test Service to store and retrieve test items on exclusive and shared folders


    ## kompose

    curl -L https://github.com/kubernetes/kompose/releases/download/v1.34.0/kompose-linux-amd64 -o kompose
  app.py: "from fastapi import FastAPI\nfrom pydantic import BaseModel\nimport logging\nimport os\nimport json\n\nlogging.basicConfig(level=logging.INFO)\n\napp = FastAPI()\n\ndb = {}  # Simulated in-memory database\ndb_shared = {}  # Simulated in-memory shared database\n\nclass Item(BaseModel):\n    id: int\n    data: str\n\n@app.post(\"/create\")\ndef create_item(item: Item):\n    db[item.id] = item.data\n    \n    if os.path.exists(\"/data\"):\n        with open(f\"/data/data{item.id}.json\",\"w\") as f:\n            json.dump(item.model_dump_json(), f)\n            logging.info(f\"Data saved to /data/data{item.id}.json\") \n    else:\n         logging.warning(\"/data directory does not exist\")   \n    return {\"message\": \"Item created\", \"id\": item.id}\n\n@app.post(\"/createshared\")\ndef create_shared_item(item: Item):\n    db_shared[item.id] = item.data\n    if os.path.exists(\"/datashared\"):\n        with open(f\"/datashared/data{item.id}.json\",\"w\") as f:\n            json.dump(item.model_dump_json(), f)\n            logging.info(f\"Data saved to /datashared/data{item.id}.json\") \n    else:\n         logging.warning(\"/data directory does not exist\")  \n    return {\"message\": \"Shared item created\", \"id\": item.id}\n\n@app.get(\"/read/{id}\")\ndef read_item(id: int):\n    \n    if os.path.exists(\"f/data/data{id}.json\"):\n        with open(f\"/data/data{id}.json\",\"r\") as f:\n            data = json.load(f)\n            logging.info(f\"Data read from /data/data{id}.json\")\n            return data\n    elif id in db:\n        logging.info(f\"Data read from in-memory database\")\n        return {\"id\": id, \"data\": db[id]}\n    return {\"error\": \"Item not found\"}\n\n@app.get(\"/readshared/{id}\")\ndef read_shared_item(id: int):\n    \n    if os.path.exists(\"f/datashared/data{id}.json\"):\n        with open(f\"/datashared/data{id}.json\",\"r\") as f:\n            data = json.load(f)\n            logging.info(f\"Data read from /datashared/data{id}.json\")\n            return data    \n    elif id in db_shared:\n        logging.info(f\"Data read from in-memory shared database\")\n        return {\"id\": id, \"data\": db_shared[id]}\n    return {\"error\": \"Shared item not found\"}\n\n@app.get(\"/hello\")\ndef hello():\n    return \"<html><body><h1>Hi there from fast api!</h1></body></html>\"   "
  data1.json: |
    {"id": 1, "data": "example data 20250305-1600"}
  datashared1.json: |
    {"id": 2, "data": "example shared data 20250305-1600"}
  docker-compose.yml: |
    version: '3.8'

    services:
      kubetestapi:
        image: matsvitt/kubetestapix:latest
        ports:
          - "8000:8000"
        volumes:
          - .:/app
          - ./data:/data
          - ./datashared:/datashared
        environment:
          - PYTHONUNBUFFERED=1
        command: ["uvicorn", "appb:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
  read_k8s_test.sh: |+
    #!/bin/bash

    today=$(date +%Y%m%d-%H%M)

    #echo "{\"id\": 1, \"data\": \"example data ${today}\"}" > data1.json
    #echo "{\"id\": 2, \"data\": \"example shared data ${today}\"}" > datashared1.json


    #curl -X POST "https://kubix1.cookingnumbers.com/create" -H "Content-Type: application/json" -d @./data1.json
    #curl -X POST "https://kubix1.cookingnumbers.com/createshared" -H "Content-Type: application/json" -d @./datashared1.json
    echo ""
    curl -X GET "https://kubix1.cookingnumbers.com/read/1"

    echo ""
    curl -X GET "https://kubix1.cookingnumbers.com/readshared/2"

  requirements.txt: |
    fastapi
    uvicorn
    pydantic
  run_k8s_test.sh: |+
    #!/bin/bash

    today=$(date +%Y%m%d-%H%M)

    echo "{\"id\": 1, \"data\": \"example data ${today}\"}" > data1.json
    echo "{\"id\": 2, \"data\": \"example shared data ${today}\"}" > datashared1.json


    curl -X POST "https://kubix1.cookingnumbers.com/create" -H "Content-Type: application/json" -d @./data1.json
    curl -X POST "https://kubix1.cookingnumbers.com/createshared" -H "Content-Type: application/json" -d @./datashared1.json
    echo ""
    curl -X GET "https://kubix1.cookingnumbers.com/read/1"

    echo ""
    curl -X GET "https://kubix1.cookingnumbers.com/readshared/2"

kind: ConfigMap
metadata:
  labels:
    io.kompose.service: kubetestapi
  name: kubetestapi-cm0
